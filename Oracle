VIEWS
=====
=> Views are known as logical tables.
=> They represents the data of one of more tables.
=> A view derives it's data from the tables on which it is based.
=> These tables are called base tables.
=> Views can be based on actual tables or another view also.

view
----
=> It's a database object contains logical copy of selected table data.
=> It can be created based on frequently using data.
=> It reduces no of hits to the database.
=> It improves the performance of queries and database.

Types of Views
---------------
1. Simple view / updateable view :
=> It is created based on single table data. It allows DML operations.
=> Syntax: create view <view_name> as select col,col2,... from table_name where <condition>;
=> Ex: create view vw_mgr_info as select * from emp where job = 'MANAGER';

2. Composite view or read only view :
=> It is created based on more than one table data. It's not allow DML operations. 
=> Advantage: It will reduce writing number of join queries again and again.
=> Syntax: create view <view_name> as select ..... from tab1, tab2,..... where <join_cond>;
=> Ex: create view vw_emp_dept_info as select ename,sal,job from emp,dept where job='MANAGER' and emp.deptno=dept.deptno

3. Inline view
=> An inline view is a SELECT statement in the FROM-clause of another SELECT statement.
=> In-line views are commonly used to simplify complex queries by removing join operations and condensing several separate queries into a single query.

4. Force view
=> A view can be created even if the defining query of the view cannot be executed, as long as the CREATE VIEW command has no syntax errors.
=> Ex: create force view vw_act_dtls_sb as select * from cust_act_dtls where act_type='SB' order by act_bal;

5. Materialized views
=> A materialized view, or snapshot as they were previously known, is a table segment whose contents are periodically refreshed based on a query, either against a local or remote table.
=> Ex: create materialized view emp_mv build immediate refresh force on demand as select * from emp@db1.world;


CLUSTERS
========
=> In Oracle, a cluster is a database object that is used to group together tables that share common columns and are often queried together. 
=> A cluster enables the data from multiple tables to be stored together in the same database blocks, based on the values in one or more columns. 
=> This physical organization can improve the performance of certain types of queries, as it reduces the number of I/O operations needed to retrieve related data.
=> Not Always Recommended: With advancements in Oracle database technology and improvements in query optimization, the use of clusters has become less common. 
    In many cases, alternative techniques such as indexing and partitioning are preferred for optimizing query performance.

SEQUENCES
=========
=> It is a data base object which is used to generate sequential integers with the specified interval value.
=> Generally the sequences are used to generate primary key values.
=> Syntax: create sequence <seq_name> increment by <val> start with <val> max value <val>;
=> Note: By default the sequences starts with 1 and increment value is also 1.
=> Note: Sequence is an independent object.It's not depending on any table.
=> Ex: create sequence srno1;
=> <seq_name>.CURRVAL (Display current value of the sequence). Ex: srno1.currval;
=> <seq_name>.NEXTVAL (Display next value of the sequence). Ex: srno1.nextval();

SYNONYMS
********
=> Synonyms are used to create permanent alias names for the table.
=> Types 
1. Private synonym  : It is a default synonym and it's used by the owner only.
2. Public synonym   : It is created by DBA. And it can be accessed by permitted authenticated user.

=> syntax: create [public] synonym <synonym_name> for <table_name>
=> create synonym emp for employee;

Note: Once a synonym is created then we can use synonym name instead of table name for any operations on the table.



                                                        ORACLE's SQL FUNCTIONS
                                                        ***********************

Categories:
===========
1. Group or Aggregate Functions 
  => These functions can acts on group of values display single output value.
  => These functions act on column level/field level
  => sum(), avg(),....
2. Scalar/Single Row Functions
  => These functions acts on group of values and display a set of output values.
  => These functions act on Record level / row level
  => lower(), length(), trim()
The above 2 categories of functions are further devided into following 4 types:

Types of Functions: 4
----------------------
i. Numeric Functions - Acts on numeric data.
ii. String Functions - Acts on char data.
iii. Date Functions  - Acts on date data.
iv. Conversion Functions - It acts on one data type and display result in other data types.

NUMERIC FUNCTIONS [GROUP FUNCTIONS]
===================================
These functions act on column data only.

i) SUM(colname)
  => It will display addition of values from the column.
  => select sum(sal) from emp;
ii) AVG(colname)
  => It will display average value from the column.
  => select avg(cost) avgcost from prod_dtls;
iii) MAX(colname)
  => Display higher value from the column.
  => select max(sal) from emp;
iv) MIN(colname)
  => Display lower value from the column.
  => select * from products where cost in(select min(cost) from products where pname='MOBILE');
v) COUNT(colname)
  => Display number of values from the column except null values.
  => select count(comm) from emp;
vi) COUNT(*)
  => Display number of records from a table.
  => select count(*) from emp;

GROUP BY CLAUSE
---------------
=> It is used to group related data by considering distinct values from the column.
=> On each group the oracle engine executes the aggregate function and display result individually.
=> select deptno, count(*) from emp GROUP BY deptno order by deptno;

HAVING CLAUSE
-------------
=> It is used specify conditions on group by output.
=> select deptno, count(*) from emp group by deptno HAVING count(*)>=0 order by deptno;

NUMERIC FUNCTIONS (SCALAR FUNCTIONS)
====================================
1. ABS(n) [ABSOLUTE]
  => Display absolute value of n.
  => select abs(-9) from dual; //output : 9
2. MOD(m,n)
  => Display remainder value after m devides n.
  => select mod(17,5) from dual; //output : 2
3. POWER(m,n)
  => Display m power of n'th value.
  => select power(5,3) from dual; //output : 125
4. SQRT(n) [ square root]
  => Display square root value of n.
  => select sqrt(64) from dual; //output : 4
5. ROUND(m,n)
  => Display value 'm' which is rounded to the 'n' number of decimal places. Before displaying 'nth' decimal digit it will check 'n+1 th' decimal digit.
  => If it is > or = 5 then 'nth' digit incremented by 1.
  => select round(63.354, 2) from dual; // output : 63.35
  => select round(63.354) from dual; // output : 63
6. TRUNC(m,n)
  => Display value m which is truncated to the n number of decimal places.
  => select round(63.354, 2) from dual; // output : 63.3
  => select round(63.554) from dual; // output : 63
7. FLOOR(n)
  => Display highest integer value which is lessthan or equal to given value.
  => select floor(64.2) from dual; // output : (0,1,2,....,63,64) = 64
8. CEIL(n)
  => Display lowest integer value which is greater or equal to given value.
  => select floor(64.2) from dual; // output : (0,1,2,....,63,64) = 65
9. LEAST(val/expr, val/expr,....)
  => Display minimum value from the given values or expression results.
  => select least(32, (6*5), (20-10), (36/2)) from dual; // output : 10
10. GREATEST(val/expr, val/expr)
  => Display maximum value from the given values or expressions.
  => select greatest(32, (6*5), (20-10), (36/2)) from dual; // output : 32

STRING FUNCTIONS
================
1. ASCII('ch)
  => Display ASCII value of the character.
  => select ascii('a') from dual; //output : 97
2. LENGTH('str'/col)
  => Display number of chars from the given string or column values
  => select lenth('oracle') from dual; //output : 6
3. LOWER('str'/col)
  => Display the given string chars or column values in lower case.
  => select lower('OWL') from dual; // output : owl
4. UPPER('str'/col)
  => Display given string chars or column values in upper case.
  => select lower('owl') from dual; //output : OWL
5. INITCAP('str'/col) [initial capital]
  => Display the given string or column values with beginning char as capital.
  => select initcap('welcome') from dual; // output : Welcome
6. SUBSTRING('str'/col,m,n) (substring)
  => Display a substring from the given string. Here the substring started with 'm' th char and through 'n' number of chars.
  => select substr('secure',3,4) from dual;// output : cure
7. INSTR('str'/col,'ch',m,n) [instring]
  => Display the position of char in the given string or not.
  => Here 'm' value is either +1(default) or -1
    +1 means search the character position from the beginning of string.
    -1 means search the character position from the end of string.
  => Here n is the occurance of given character.
  => select instr('welcome','e',1,1) from dual; // output : 2
8. TRANSLATE('str'/col, 'sourcechars','targetchars')
  => It will display given string chars by translating source chars with corresponding target chars.
  => select translate('welcome','em','xy') from dual; //output : wxlcoyx
9. REPLACE('str'/col,'source string','target string')
  => Display given string by replacing source string with target string.
  => select replace('welcome','come','sys') from dual; //welsys
10. TRIM('str'/col)
  => Display given string by eleminating blank spaces before and after the string.
  => select trim('  welcome to   ') from dual; // output : welcome to
11. LTRIM('str'/col) [left trim]
  => Display given string by removing blank spaces from the left of string only.
  => select ltrim('         welcome to') from dual; // output : welcome to
12. RTRIM('str'/col) [right trim]
  => Display given string by removing blank spaces from right of string only.
  => select rtrim('welocme to   ') from dual; // output : welcome to

TRIM WITH KEYWORD
13. LEADING 'ch' FROM 'str'/col
  => Display given string by removing similar occurances of specific char from left of string.
  => select trim(leading 'x' from 'xxxcxxdxxxx') from dual; //output : cxxdxxxx
14. TRAILING 'ch' FROM 'str'/col
  => Display given string by removing similar occurances of specific char from right of string.
  => select trim(leading 'x' from 'xxxcxxdxxxx') from dual; //output : xxxcxxd
15. BOTH 'ch' FROM 'str'/col
  => Display given string by eleminating similar occurances of specific char from both sides of string.
  => select trim(leading 'x' from 'xxxcxxdxxxx') from dual; //output : cxxd
16. LPAD('str'/col, n, 'ch') [left padding]
  => Display given string along with the specific char in the left of the string.
  => select lpad('page 1', 12, '*') from dual; // output : ******page 1
17. RPAD('str'/col, n, 'ch') [right padding]
  => Display given string along with specific char in the right of string.
  => select lpad('page 1', 12, '*') from dual; // output : page 1******




DATE FUNCTIONS
=================
1. TO_DATE('char fmt of date', date) : 
  => It will display any non-Oracle date format value in Oracle's format.
  => It accepts any char format of date(dd/mm/yy or dd-mm-yyyy or dd:mon:yyyy or yyyy-mm-dd) and converts it into oracles default date format.
  => Example: select to_date('22/03/2015', 'dd/mm/yyyy') from dual

2. ADD_MONTHS(d,n) :
  => Display a date value after adding 'n' number of months to the specified date.
  => Example: select add_months(sysdate, 6) from dual.

3. MONTHS_BETWEEN(d1, d2) :
  => It shows number of months between dates.
  => Example: select months_between(sysdate, '21-may-13)

4. LAST_DAY(d) :
  => Display the date value of last day in the month.
  => Example: select last_day('06-jul-10) from dual

5. NEXT_DAY(d, 'weekdayname') :
  => It will display the date value of given weekdayname after the specified date.
  => select next_day(sysdate, 'saturday') from dual


CONVERSION FUNCTIONS
=======================
1. TO_NUMBER(chardata, [numberdata]) : It accepts the chardata which contains a sequence of digits and convert it into number type data.for example to_number(substr(sal,2)).
2. TO_CHAR(num, [char]) : It accepts number type data and convert it into character type data. For example to_char(price_list,'000.00').
3. TO_CHAR(date, [char]) : It accepts Oracle's date type data and convert it into required char format. For example to_char(sysdate, 'dd month yyyy')

