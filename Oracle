OPERATORS
*********
DUAL table : It's a system defined table which contains only one column to perform calculations on users own data.

1. Arithmetic Operators : + - * / 
=> These are used to perform Arithmatic calculations on user's own data and table data.
=> Ex: select 200+300 from dual;

2. Relational Operators : < > = <= >=
=> These are used to compare values by specifying conditions on the columns.

3. Special Operators : 
BETWEEN : It supports specific range of values. 
Syntax: select col1,col2,...coln/* from table_name where <columnname> BETWEEN <start_value> AND <end_value> order by col1, col2,..[asc/desc]
Ex: select sal from emp where sal between 2000 and 3000 order by sal
=> In the above syntax it includes both start value and end value. BETWEEN Operator supports both Numeric range and Date range.


IN : It supports specific list of values.
Syntax: select col1, col2,...coln/* from table_name where <ColumnName> IN (val1, val2,...) order by col1, col2...coln [asc/desc]
Ex: select * from emp where job IN('clerk','manager')
=> IN operator works on Numeric, String and Date type data.

IS NULL : It's used to check the column value is null or not, if it's null display output.
Syntax: select col1,col2..,coln/* from table table_name where <ColumnName> IS NULL order by col1, col2...coln [asc/desc]
Ex: select empno,ename,esal from emp where comm IS NULL.
=> It works on only null values and it's independent of data type of column.

LIKE : It's used to represents sequence of chars / specific strings.
Syntax: select col1,col2,...coln/* from table_name where <ColumnName> LIKE 'string' order by col1, col2, ...coln [asc/desc]
Ex: select ename from emp where ename like 'S%';
=> It uses two symbols _(underscore) represents anyone char, % represents any number of chars



Data Integrity Constraints
==========================
=> Constraints are set of rules / business rules which will be defined at DDL level.
=> Constraints enforce the data base to allow only valid values in to the tables.
=> Constraints ensure the user to fetch only valid / complete and accurate data from the database.

Types:
------
1. Key Constraints
2. Domain Constraints
3. Referential Integrity

1. KEY CONSTRAINTS: 
=> These constraints check the individual values in to a column according to Business.

a). UNIQUE : It doesn't allow duplicates but allows null values. Ex: This constraint is suitable for maintaining phone, number etc.
b). NOT NULL : It doesn't allow null values but allows duplicates. Ex: EmpNames, CustNames...
c). PRIMARY KEY : It doesn't allow duplicates and null values.Generally a Primary key is used to identify any record in a table
                        uniquely. 'Only one primary key is allowed per a table'.

            i. Simple Primay Key : If a Primary Key defined on a single column then it's known as simple primary key.
            ii. Composite Primary Key : If a Primary Key constraint defined on more than one column then it's known as Composite PK
=> Max no of columns in to a composite PK are 32 columns.
=> Note : Even after the key constraints on the table, still we have invalid values. We can eliminate them by using DOMAIN constraints.

Displaying constraints information on a table:
----------------------------------------------
=> In oracle databases, all constraints stored in a system defined table called USER_CONSTRAINTS 
=> Each constraint named and numbered uniquely like, SYS_Cn (System defined Constraint)
=> Ex: select constraint_name, constraint-type from user_constraint where table_name = 'employee';

NORMALIZATION AND DENORMALIZATION
*********************************
Types: 
1. NORMALIZATION : Maintaining data in different tables and implement Physical relationships between the tables.
=> The process of deviding a big table into sub tables until the data duplicacy is maximum reduced is called normalization process.

i) Ist NF(normal form) : Deviding the table into sub tables based on repeated groups of data.
ii) II NF(normal form) : Eleminating duplicates and defining primay keys.
iii) III NF(normal form) : Implementing relationships between the tables by using Primary key of dept table define the foreign key column
            under emp table.
=> It occupies less disk space and max, data duplicacy is reduced.

Advantages
----------
=> Searching for required data is as much as fast.
=> Data retrieval is fast.
=> Max data duplicacy is eleminated.
=> Occupy less Disk space.

2. DENORMALIZATION : Maintaining all the information in one big table.
=> Maintaining all information in one big table is known as De-normalized method.
=> It contains duplicate data.
=> It occupies more disk space.
=> data retrieval time is very high.
=> If table have 10 rows and 5cols then diskspace will be consume 10*5=50kb.

3. REFERENTAL INTEGRITY CONSTRAINTS
-----------------------------------
=> Used to implement PHYSICAL relationship between the tables by using primary key of one table and we can define 
   foreign key in other table.
=> Foreign key column contains only values from primary key.
=> Foreign key contains duplicates and null values also.
=> A table which contains primary key is considered as Parent / Master / Base table.
=> A table which contains foreign key is known as child table / Detailed table / Derived table.



MERGE statement
===============
=> Oracle's MERGE statement is used for situations when you want to do an 'upset' i.e update existing rows in a table or insert new rows depending on a match condition.
=> This is typically the case when you have to synchronize a table periodically with data from another source (table/view/query).
=> Syntax: MERGE into <target table> USING <source table/view/result of subquery> ON <match condition> WHEN MATCHED THEN <update clause> <delete clause> 
            WHEN NOT MATCHED THEN <insert clause>

=> merge into student a using(select id,name,score,from student_n)b on (a.id=b.id) when matched then update set a.name = b.name,a.score=b.score when not matched then 
            insert(a.id,a.name,a.score)values(b.id,b.name,b.score);


SET OPERATORS
=============
=> The operators are used to select same data type of data and equal no of column's data from multiple tables. (OR) These operators will display combined data from multiple tables.

1. UNION : It will display combined data from multiple tables without duplicates.
2. UNION ALL : It will display combined data from multiple tables with duplicates.
3. INTERSECT : It will display common data from multiple tables (from multiple select stms)
4. MINUS : It will display values from first selection by eliminating values which are repeating in second selection.

For example : s1 = {a,b,c,d}             s2 = {x,y,z,c,b}

1. select * from s1 union select * from s2; //output : {a,b,c,d,x,y,z}
2. select * from s1 union all select * from s2; //output : {a,b,c,d,x,y,z,c,b}
3. select * from s1 intersect select * from s2; //output : {c,b}
4. select * from s1 minus select * from s2; //output : {a,d}

Q. What are the limitations of set operators ?
Ans: We need to select equal number of columns from each table. We need to select same data type of data in the same sequence under each select query.


JOINS
=====
1. CROSS JOIN
2. EQUI JOIN / INNER JOIN
3. SELF JOIN
4. OUTER JOINS

1. CROSS JOIN
-------------
=> It will display combination of data from multiple tables.
=> In this join, each value in the first table is mapped with all values in the second table.
=> It will display all possible combinations of data from multiple tables.
=> Ex: consider s1 = {a,b,c,d} s2 = {d1,d2} => s1 * s2 = {(a,d1), (a,d2), (b,d1), (b,d2), (c,d1), (c,d2), (d,d1), (d,d2)}
=> Syntax: select col1, col2, ...coln from table1, table2,... where <cond> order by col1, col2,....[desc];

2. INNER JOIN / EQUI JOIN
-------------------------
=> A cross join is known as equi join if we specify join condition using '=' operator. It will display only matched data from all tables.
=> A condition is known as join condition if it's specified between primary key of one table and foreign key of other table.
=> Syntax: select col1, col2,..coln/* from table1, table2,... where table1.pk=table2.fk and table2.pk=table3.fk.....
=> Ex: 
Equi Join: select cd.cname,cd.city,cad.act_type,cad.act_bal,at.act_name from cust_dtls cd, cust_act_dtls cad, act_types at where cd.cno=cad.cust_code and cad.act_type=at.act_type
Inner Join: select cd.cname,cd.city,cad.actno,cad.act_type,cad.act_bal,at.act_name from cust_dtls cd inner join cust_act_dtls cad ON cd.cno=cad.cust_code INNER JOIN act_types_info at 
            ON cad.act_type=at.act_type

3. SELF JOIN
------------
=> A table which is joined itself is known as self join. In this case we can use alias names for single table.
=> Here the alias names are temporary.
=> select e2.ename,e2.city from employee e1, employee e2 where e1.ename = 'john' and e1.city=e2.city;

4. OUTER JOINS
--------------
=> These are used to display all data from one table and only matched data from other table.
Types:

1. Left outer join / left join
    => Display all the data from left table and only matched data from right table.
2. Right outer join / Right join
    => Display complete data from right table and only matched data from left table.
3. Full outer join / Full join
    => Display
        -> matched data from both the tables
        -> unmatched data from left table
        -> unmatched data from right table
=> Syntax: select col1,col2,col... from table1 [left join/right join/full join] table2 ON table1.pk=table2.fk;


SUB QUERIES
===========
=> A query with in other query is known as sub query.
=> Sub queries are preferable to display output from one table and having an input value from other table.
=> The execution process is always from innermost query to the outermost.
=> Syntax: select ..from table where[=/IN/exists/not exists](select ...from table...where [=/in/exists/not exists](select...)..)
=> Ex: select * from emp where deptno=(select deptno from dept where dname='ACCOUNTING')

CORRELATED SUBQUERY
-------------------
=> A sub query which depends on a value generated by outer query. Here the execution process is as follows.
    -> First outer query has to be executed and generates some output values.
    -> Second based on these output values, sub query has to be executed.
    -> From subquery we have some output and it's passed to outer query again.
    -> Then outer query has to be executed again.

Types:
------
1. Single row subquery :
    => A sub query which returns single output value.
    => In this case in between the outer and inner queries we can use = operator.
    => Ex: select * from emp where deptno=(select deptno from dept where dname='ACCOUNTING')

2. Multi row subquery :
    => A sub query which returns multiple output values.
    => In this case in between the outer and inner queries we can use IN operator.
    => select * from cust_dtls where cno IN(select cust_code from cust_act_dtls where act_type=(select act_type from act_types where act_name='Savings Bank A/c.'));

VIEWS
=====
=> Views are known as logical tables.
=> They represents the data of one of more tables.
=> A view derives it's data from the tables on which it is based.
=> These tables are called base tables.
=> Views can be based on actual tables or another view also.

view
----
=> It's a database object contains logical copy of selected table data.
=> It can be created based on frequently using data.
=> It reduces no of hits to the database.
=> It improves the performance of queries and database.

Types of Views
---------------
1. Simple view / updateable view :
=> It is created based on single table data. It allows DML operations.
=> Syntax: create view <view_name> as select col,col2,... from table_name where <condition>;
=> Ex: create view vw_mgr_info as select * from emp where job = 'MANAGER';

2. Composite view or read only view :
=> It is created based on more than one table data. It's not allow DML operations. 
=> Advantage: It will reduce writing number of join queries again and again.
=> Syntax: create view <view_name> as select ..... from tab1, tab2,..... where <join_cond>;
=> Ex: create view vw_emp_dept_info as select ename,sal,job from emp,dept where job='MANAGER' and emp.deptno=dept.deptno

3. Inline view
=> An inline view is a SELECT statement in the FROM-clause of another SELECT statement.
=> In-line views are commonly used to simplify complex queries by removing join operations and condensing several separate queries into a single query.

4. Force view
=> A view can be created even if the defining query of the view cannot be executed, as long as the CREATE VIEW command has no syntax errors.
=> Ex: create force view vw_act_dtls_sb as select * from cust_act_dtls where act_type='SB' order by act_bal;

5. Materialized views
=> A materialized view, or snapshot as they were previously known, is a table segment whose contents are periodically refreshed based on a query, either against a local or remote table.
=> Ex: create materialized view emp_mv build immediate refresh force on demand as select * from emp@db1.world;


CLUSTERS
========
=> In Oracle, a cluster is a database object that is used to group together tables that share common columns and are often queried together. 
=> A cluster enables the data from multiple tables to be stored together in the same database blocks, based on the values in one or more columns. 
=> This physical organization can improve the performance of certain types of queries, as it reduces the number of I/O operations needed to retrieve related data.
=> Not Always Recommended: With advancements in Oracle database technology and improvements in query optimization, the use of clusters has become less common. 
    In many cases, alternative techniques such as indexing and partitioning are preferred for optimizing query performance.

SEQUENCES
=========
=> It is a data base object which is used to generate sequential integers with the specified interval value.
=> Generally the sequences are used to generate primary key values.
=> Syntax: create sequence <seq_name> increment by <val> start with <val> max value <val>;
=> Note: By default the sequences starts with 1 and increment value is also 1.
=> Note: Sequence is an independent object.It's not depending on any table.
=> Ex: create sequence srno1;
=> <seq_name>.CURRVAL (Display current value of the sequence). Ex: srno1.currval;
=> <seq_name>.NEXTVAL (Display next value of the sequence). Ex: srno1.nextval();

SYNONYMS
********
=> Synonyms are used to create permanent alias names for the table.
=> Types 
1. Private synonym  : It is a default synonym and it's used by the owner only.
2. Public synonym   : It is created by DBA. And it can be accessed by permitted authenticated user.

=> syntax: create [public] synonym <synonym_name> for <table_name>
=> create synonym emp for employee;

Note: Once a synonym is created then we can use synonym name instead of table name for any operations on the table.



                                                        ORACLE's SQL FUNCTIONS
                                                        ***********************

Categories:
===========
1. Group or Aggregate Functions 
  => These functions can acts on group of values display single output value.
  => These functions act on column level/field level
  => sum(), avg(),....
2. Scalar/Single Row Functions
  => These functions acts on group of values and display a set of output values.
  => These functions act on Record level / row level
  => lower(), length(), trim()
The above 2 categories of functions are further devided into following 4 types:

Types of Functions: 4
----------------------
i. Numeric Functions - Acts on numeric data.
ii. String Functions - Acts on char data.
iii. Date Functions  - Acts on date data.
iv. Conversion Functions - It acts on one data type and display result in other data types.

NUMERIC FUNCTIONS [GROUP FUNCTIONS]
===================================
These functions act on column data only.

i) SUM(colname)
  => It will display addition of values from the column.
  => select sum(sal) from emp;
ii) AVG(colname)
  => It will display average value from the column.
  => select avg(cost) avgcost from prod_dtls;
iii) MAX(colname)
  => Display higher value from the column.
  => select max(sal) from emp;
iv) MIN(colname)
  => Display lower value from the column.
  => select * from products where cost in(select min(cost) from products where pname='MOBILE');
v) COUNT(colname)
  => Display number of values from the column except null values.
  => select count(comm) from emp;
vi) COUNT(*)
  => Display number of records from a table.
  => select count(*) from emp;

GROUP BY CLAUSE
---------------
=> It is used to group related data by considering distinct values from the column.
=> On each group the oracle engine executes the aggregate function and display result individually.
=> select deptno, count(*) from emp GROUP BY deptno order by deptno;

HAVING CLAUSE
-------------
=> It is used specify conditions on group by output.
=> select deptno, count(*) from emp group by deptno HAVING count(*)>=0 order by deptno;

NUMERIC FUNCTIONS (SCALAR FUNCTIONS)
====================================
1. ABS(n) [ABSOLUTE]
  => Display absolute value of n.
  => select abs(-9) from dual; //output : 9
2. MOD(m,n)
  => Display remainder value after m devides n.
  => select mod(17,5) from dual; //output : 2
3. POWER(m,n)
  => Display m power of n'th value.
  => select power(5,3) from dual; //output : 125
4. SQRT(n) [ square root]
  => Display square root value of n.
  => select sqrt(64) from dual; //output : 4
5. ROUND(m,n)
  => Display value 'm' which is rounded to the 'n' number of decimal places. Before displaying 'nth' decimal digit it will check 'n+1 th' decimal digit.
  => If it is > or = 5 then 'nth' digit incremented by 1.
  => select round(63.354, 2) from dual; // output : 63.35
  => select round(63.354) from dual; // output : 63
6. TRUNC(m,n)
  => Display value m which is truncated to the n number of decimal places.
  => select round(63.354, 2) from dual; // output : 63.3
  => select round(63.554) from dual; // output : 63
7. FLOOR(n)
  => Display highest integer value which is lessthan or equal to given value.
  => select floor(64.2) from dual; // output : (0,1,2,....,63,64) = 64
8. CEIL(n)
  => Display lowest integer value which is greater or equal to given value.
  => select floor(64.2) from dual; // output : (0,1,2,....,63,64) = 65
9. LEAST(val/expr, val/expr,....)
  => Display minimum value from the given values or expression results.
  => select least(32, (6*5), (20-10), (36/2)) from dual; // output : 10
10. GREATEST(val/expr, val/expr)
  => Display maximum value from the given values or expressions.
  => select greatest(32, (6*5), (20-10), (36/2)) from dual; // output : 32

STRING FUNCTIONS
================
1. ASCII('ch)
  => Display ASCII value of the character.
  => select ascii('a') from dual; //output : 97
2. LENGTH('str'/col)
  => Display number of chars from the given string or column values
  => select lenth('oracle') from dual; //output : 6
3. LOWER('str'/col)
  => Display the given string chars or column values in lower case.
  => select lower('OWL') from dual; // output : owl
4. UPPER('str'/col)
  => Display given string chars or column values in upper case.
  => select lower('owl') from dual; //output : OWL
5. INITCAP('str'/col) [initial capital]
  => Display the given string or column values with beginning char as capital.
  => select initcap('welcome') from dual; // output : Welcome
6. SUBSTRING('str'/col,m,n) (substring)
  => Display a substring from the given string. Here the substring started with 'm' th char and through 'n' number of chars.
  => select substr('secure',3,4) from dual;// output : cure
7. INSTR('str'/col,'ch',m,n) [instring]
  => Display the position of char in the given string or not.
  => Here 'm' value is either +1(default) or -1
    +1 means search the character position from the beginning of string.
    -1 means search the character position from the end of string.
  => Here n is the occurance of given character.
  => select instr('welcome','e',1,1) from dual; // output : 2
8. TRANSLATE('str'/col, 'sourcechars','targetchars')
  => It will display given string chars by translating source chars with corresponding target chars.
  => select translate('welcome','em','xy') from dual; //output : wxlcoyx
9. REPLACE('str'/col,'source string','target string')
  => Display given string by replacing source string with target string.
  => select replace('welcome','come','sys') from dual; //welsys
10. TRIM('str'/col)
  => Display given string by eleminating blank spaces before and after the string.
  => select trim('  welcome to   ') from dual; // output : welcome to
11. LTRIM('str'/col) [left trim]
  => Display given string by removing blank spaces from the left of string only.
  => select ltrim('         welcome to') from dual; // output : welcome to
12. RTRIM('str'/col) [right trim]
  => Display given string by removing blank spaces from right of string only.
  => select rtrim('welocme to   ') from dual; // output : welcome to

TRIM WITH KEYWORD
13. LEADING 'ch' FROM 'str'/col
  => Display given string by removing similar occurances of specific char from left of string.
  => select trim(leading 'x' from 'xxxcxxdxxxx') from dual; //output : cxxdxxxx
14. TRAILING 'ch' FROM 'str'/col
  => Display given string by removing similar occurances of specific char from right of string.
  => select trim(leading 'x' from 'xxxcxxdxxxx') from dual; //output : xxxcxxd
15. BOTH 'ch' FROM 'str'/col
  => Display given string by eleminating similar occurances of specific char from both sides of string.
  => select trim(leading 'x' from 'xxxcxxdxxxx') from dual; //output : cxxd
16. LPAD('str'/col, n, 'ch') [left padding]
  => Display given string along with the specific char in the left of the string.
  => select lpad('page 1', 12, '*') from dual; // output : ******page 1
17. RPAD('str'/col, n, 'ch') [right padding]
  => Display given string along with specific char in the right of string.
  => select lpad('page 1', 12, '*') from dual; // output : page 1******




DATE FUNCTIONS
=================
1. TO_DATE('char fmt of date', date) : 
  => It will display any non-Oracle date format value in Oracle's format.
  => It accepts any char format of date(dd/mm/yy or dd-mm-yyyy or dd:mon:yyyy or yyyy-mm-dd) and converts it into oracles default date format.
  => Example: select to_date('22/03/2015', 'dd/mm/yyyy') from dual

2. ADD_MONTHS(d,n) :
  => Display a date value after adding 'n' number of months to the specified date.
  => Example: select add_months(sysdate, 6) from dual.

3. MONTHS_BETWEEN(d1, d2) :
  => It shows number of months between dates.
  => Example: select months_between(sysdate, '21-may-13)

4. LAST_DAY(d) :
  => Display the date value of last day in the month.
  => Example: select last_day('06-jul-10) from dual

5. NEXT_DAY(d, 'weekdayname') :
  => It will display the date value of given weekdayname after the specified date.
  => select next_day(sysdate, 'saturday') from dual


CONVERSION FUNCTIONS
=======================
1. TO_NUMBER(chardata, [numberdata]) : It accepts the chardata which contains a sequence of digits and convert it into number type data.for example to_number(substr(sal,2)).
2. TO_CHAR(num, [char]) : It accepts number type data and convert it into character type data. For example to_char(price_list,'000.00').
3. TO_CHAR(date, [char]) : It accepts Oracle's date type data and convert it into required char format. For example to_char(sysdate, 'dd month yyyy')

