ORM: 
----
* ORM stands for Object Relational Mapping.
* It is a theory concept used at database programming to perform operation like insert, update, delete and select in object format only.
* JDBC converts object to primitive data and SQL Query should be writtern by programmer using primitives, which is not following OOPs. 
ORM says “Do not convet object data, do operations in OOPs. Format only”.
• For this concept programmer gend follow mapping rule. Given as 
1. className- Must be mapped with – tableName
2. VariableName- Must be mapped with – columnName
** should be done by programmer using XML/Annotatios concept.
** Then ORM convert 
Object <----> ROW
** Here , ORM only generates SQL Query.
===============================================================================================================================================
Framework:
---------
FrameWork is a Combination of diierent technologies and design patterns by 
using framework we can develop complete application or a part of application faster. It is also 
called as RAD.
RAD= Rapid Application Development (faster coding)
===============================================================================================================================================
                                        Hiberante 5 .x
=> Hibernate is a framework which has inbuilt technologies and design pattern. It follows ORM concept. (ORM=Object Relational Mapping) 

Hibernate has 3 Java Technologies 
1. JDBC
2. JTA
3. JNDI
And one Non-Java Technology “XML”.

1. JDBC = Java Database Connectivity :-It is used to perform database operations. Like insert, update, delete and select.
2. JTA = Java Transaction API It is used to either confirm (commit) changes or cancel (rollback) changes done at database.
3. JNDI = Java Naming Directory Interface It is used to create connection-pool or execute SQL Statement faster.
** POOL = it is a group of similar type object.

Hibernate follows ORM Concept so, it converts object to Row even Row to Object. SQL query also generated by ORM (Hibernate), 
But Programmer has to follow coding files in below order.

1. Configuration file
2. Model/Entity/POJO Class
3. Mapping code(XML/Annotation) 
4. Test Class [POJI-POJO]

1. Configuration file:- It is used to provide all details related to DB and Hibernate.
----------------------
a). it will store data in key = value format.
b). file name should have extension ___.cfg.xml
c). recommended name is:-hibernate.cfg.xml
d). Few keys are:- driver_Class, url, dialect , show_sql

*) Connection keys:- We must specify 4 key for DB Connection. Those are:
-------------------
1. Driver_class
2. url
3. username
4. password

*) Hibernate keys:-
5. Dialect: it is a pre-defined class in hibernate. under package: org.hibernate.dialect
>> It will generate SQL Query when Programmer performs any operations (save,update,delete,………)
>> DB to DB dialect also changes. 
Ex:- Dialects areOracleDialect, MySQLDialect, DB2Dialect, SybaseDialect, etc….

Model Class + Rules given by hibernate:-
---------------------------------------
1. class must have package statement 
2. Class must have public (no. of table =no. of classes)
3. variables must be private // (no. of column =no .of variables)
4. Default constructor with setters and getters (mutators).
5. Can override methods from Object , those are(3) toString(), equals(), hashCode()non-final ,non-static,non-private.
6. Annotations:-JPA Annotations(Java Persistency API=JPA)

Hibernate Application Files:-
---------------------------To write one application we should write 4 files, given as below:
1. Model class (Class)
2. Mapping Code (XML/ANNOTATION)
3. Configuration file (XML)
4. Test Class (class)

1. Model Class:- here Model mean Data.
--------------------------------------
➢ It can also be called as Entity/POJO
➢ It is a class follows rules given by Hibernate Framework. Those are:
    a) Class must have package statement 
    b) Class must be public Type.(Number of Tables = No. Of Model Classes)
    c) Class can have variables, must be type private [No. of Columns= No. Of Variables]
    d) Class should have default Constructor and setter-getters methods (Mutators)(Hiberante uses def.const,set/gets)
    e) Class can override methods from java.lang.Object(C), Those are:toString(), equals(), and hashCode()
    *** These methods are non-final, non-private and non-static, So we can override methods in models class.
    f) Class can have annotations given by JPA (Java Persistency API) and also Core Annotation(=An annotation defined in java.lang package)
    g) Class can inherit (IS-A) [extends/implements] only Hibernate API(HibernateClasses and interfaces)
    *** One special interface is allowed that is java.io.Serializable(I) on model class.

@Entity : It maps model class with DB Table and Variables with columns
@Id: It indicates primary Key. Every Table must Contain Primary key.
@Table :- It is Optional , We can provide column details like column name.
*** if @Table, @Column are not provided then className is TableName,variableName is ColumnName(taken by Hibernate);

3. Hibernate Configuration File:- for one application we should provide one configuration file 
-------------------------------
*) it is XML Format
*) it contains details like properties + mapping classes Cfg= property + mapping class
*) Here Property means data in key= value format.

Keys are given below (8 keys)
1) hibernate.connection.driver_class=oracle.jdbc.driver.OracleDriver
2) hibernate.connection.url=jdbc:oracle:thin@localhost:1521:xe
3) hibernate.connection.username=system
4) hibernate.connection.password=system
5) hibernate.dialect=org.hibernate.dialect.OracleDialect
6) hibernate.show_sql=true
7) hibernate.format_sql=true
8) hibernate.hbm2ddl.auto=update

1. dialect: dialect is class it will be generate the SQL Query when programmer performs operation, for every database dialect is different.
EX:- Oracle DB= OracleDialect, MySQL DB= MySQLDialect, Sybase DB= SybaseDialect, H2 DB = H2Dialect
All dialect are defined in package org.hibernate.dialect

2. show_sql:- it is a Boolean property default value is false. To see generated SQL on Console make value as true.
3. format_sql:- it is a Boolean property default value is false. It will display sql clause by clause (part by part)
Ex:- Select Eid ,name From Emptab Where Eid=10
Value must be set to ‘true’ 
4. hbm2ddl.auto:- here hbm= hiberante mapping ddl=Data definition language(create /alter/drop in SQL). it has four possible value. Those are:-
  a. validate (default value)
  b. create 
  c. update
  d. create-drop

  A. Validate:- in this case hibernate creates no tables programmer has to create or modify tables manually. It is only default value.
  B. Create:- hibernate creates always new tables, if table exist then it will be drop.
  C. Update:- it creates new table if table not exits else uses same tables. 
  D. Create-drop:- this option is used for testing process not in development, it’s new table and performs operation at last table will be drop.
  
*) configuration file must follow naming rule given by hibernate for auto-detection. Hibernate.cfg.xml
  <hibernate-configuration>
    <session-factory>
    <property name=”key”>value</property>
    …………………………………………………………………….
    <mapping class=”--------”/>
    </session-factory>
  </hibernate-configuration>

4). Test Class:-To perform any operation in hibernate we must write test class. 
It is used to perform operations like: select and non-select (insert, update, delete).
*** Transaction object is required for non-select operation. For “Select” it is not required, even written no exception but memory is wasted.
***Test class coding and Execution flow*** 

1. Create object to configuration (c) 
2. Load .cfg.xml file into configuration using configure () method.
3. Build SessionFactory using cfg, which handles 
a. Loading driver class
b. Creating connection 
c. Prepare statements
4. Open Session to perform on operation (either select or non-select)
5. Begin Transaction(Tx) if non-select operation is to be performed.
6. Now perform operation using session.
7. Commit or rollback transaction if tx started.
8. Close session at last.

1. Create empty configuration object using class “configuration” given by hibernate.Configuration cfg=new Configuration();
2. Load hibernate.cfg.xml file into above object using method configure() cfg.configure();
** if XML file name or location is different then code will be:
Cfg.configure(“abcd.cfg.xml”);
Cfg.configure(“com/app/one.cfg.xml”);
3. Create object to SessionFactory using cfg, which load driver class and creates connection and statement type.
SessionFactory sf=cfg.buildSessionFactory();
4. To perform operations (Task) create one Session object using SF.
Session ses=sf.openSession();
5. Start one Transaction if operation type is non-select (insert, update and delete). If select operation then Tx not required.
Transaction tx=ses.beginTransaction();
6. Perform operation using session 
…………………………..
…………………………..
7. Either commit or rollback if Tx is started. tx.commit ()/tx.rollback();
8. Finally close Session ses.close();

Session(I) in hibernate:-
***************************
1. Session is an interface defined in Hibernate Framework. It is used to perform any operation in Hibernate.
    New Framework-5.x and JDK 1.7 supports auto close of session using try with resource.
Syntax:
 Try(Session ses= sf.openSession()){
 ……………………//logic
 }catch(Exception e)
 {
 ………………..
 }
*) it means java executes code like:finally { ses.close();}
2. Session(I) has extended java.lang.AutoClosebale. So, try-with-resource is working.
3. Session (I) support operations both select and non-seelct. 
Given few examples as:Non-select: Save(obj):Serializable, Update(obj):void, Delete(obj):void, saveOrUpdate(obj):void,Select: get(T.class,Id):T obj
, load(T.class,Id):T obj
Here T=Model class Name=type
Above operations are one row  one object (Single row) operations, it means at a time delete one row , select one row, update one row ……etc.
To perform multi-row operations Session(I) has provided Query Criteria APIs

***Transaction (tx) must be created using Session(I) in hibernate for non-select operations. It is not applicable for select operations.

Cache :- 
--------
it is a Temporary memory implemented by Hibernate framework(not in JDBC) which reduces network calls between Application and Database , 
that improves performance. Hibernate supports 2 type of Cache Management.
Session Cache (First Level)
Session Factory Cache(Second level) (disabled by default),Which is handled by programmer.
*** Session Cache also has sup-type Query Cache.

Session Operations:-
-------------------
1. Save(obj):- this method is given from Session (I). It is used to convert model class object to DB Table Row.
• Model class must have at least @Entity, @Id Annotations 
• @Table, @Column are optional 
*** To avoid variable mapping column, use @Transient
(Package: javax.persistence)
a). We can’t save new row into DB table with existed Primary key Id using Save() method 
Hibernate will throw ConstraintViolationException

